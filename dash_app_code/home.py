import dashimport pandas as pdfrom dash import Dash, dcc, html, Input, Output, callbackfrom dash import dccfrom dash.dependencies import Input, Outputfrom dash import dash_tableimport dash_bootstrap_components as dbcimport plotly.express as px#import plotly.graph_objects as go#df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')dash.register_page(__name__,                    path='/',                   location="sidebar")layout = dbc.Container([    dbc.Row([        dbc.Col([            html.H2('Table from selected continent'),            html.Br(),            html.Br(),            dcc.Input(id='continent-input', type='text', placeholder='select continent...'),            html.Br(),            html.Br(),            dash_table.DataTable(data=[] , id='full-table',                                  fixed_columns={'headers':True, 'data':1},                                 page_size=15,                                 style_cell={'padding': '5px'},                                 style_header={'backgroundColor': 'white',                                               'fontWeight': 'bold',                                               'border': '1px solid pink'},                                 style_data={ 'border': '1px solid blue' }                                 )            ]),        dbc.Col([            html.H2('Gdp factor influence in regards to population'),            html.Br(),            html.Br(),            dcc.Graph(id='graph-gdp-pop', figure={})])        ]),    html.Br(),    html.Br(),    html.Br(),        dbc.Row([        dcc.Slider(id='slider', min=0, max=1, marks={year: str(year) for year in range(1950, 2010, 4)})        ]),        dbc.Row([        dbc.Col([            html.H2('Continent dropdown'),            dcc.Dropdown(id='dropdown-continent', options=[], value='Europe'),            html.Br(),            dcc.Dropdown(id='dropdown-country', options=[], value='France'),            html.Br(),            dash_table.DataTable(data=[], id='table-country',                                 fixed_columns={'headers':True, 'data':1},                                 page_size=15,                                 style_cell={'padding': '5px'},                                 style_header={'backgroundColor': 'white',                                               'fontWeight': 'bold',                                               'border': '1px solid pink'},                                 style_data={ 'border': '1px solid blue' }                                 )        ]),                dbc.Col([            html.H2('Figure from Continent dropdown'),            html.Br(),            dcc.Graph(id='graph-country', figure={})            ]),        ]),    ])@callback(    [Output('full-table', 'data'),     Output('full-table', 'columns')],    [Input('store', 'data'),     Input('continent-input', 'value')     ])def fn_full_table(data, continent):        df = pd.DataFrame(data)    df_cont = df[df['continent'] == continent]    return df_cont.to_dict('records'), [{"name":i, "id": i} for i in df_cont.columns]@callback(    Output('graph-gdp-pop', 'figure'),    [Input('store', 'data'),     Input('continent-input', 'value')]    )def fn_graph_gdp_pop(data, continent):    df = pd.DataFrame(data)    df_cont = df[df['continent'] == continent]    fig = px.scatter(df_cont,                     x='gdpPercap',                     y='pop',                     color='country',                     size='lifeExp',                     hover_name='continent')    return fig    @callback(    [Output('store-min', 'data'),     Output('store-max', 'data'),     Output('store-value', 'data')     ],     Input('store', 'data')     )def fn_store_min_max(data):    df = pd.DataFrame(data)    df_year = df.loc[:, 'year']    min = df_year.min()    max = df_year.max()    value = max    return [min, max, value]# @callback(#     Output('store-marks', 'data'),#     Input('store', 'data')#     )# def fn_store_marks(data):#     df = pd.DataFrame(data)#     marks={year: str(year) for year in df['year'].unique()}#     print(f'marks ==> {marks}')#     return marks@callback(    [Output('slider', 'min'),     Output('slider', 'max'),     Output('slider', 'value')     ],        [Input('store-min', 'data'),     Input('store-max', 'data'),     Input('store-value', 'data')     ])def fn_slider(min, max, value):        print(f'Slider: min {min}')    print(f'Slider: max {max}')    print(f'Slider: value {value}')        return [min, max, value]# @callback(#     Output('slider', 'marks'),#     Input('store-marks', 'data')#     )# def fn_slider_marks(data):#     print(f'Slider: marks {data}')#     return data@callback(    Output('dropdown-continent', 'options'),    Input('store', 'data')    )def fn_dropdown_continent(data):    df = pd.DataFrame(data)    print(f'df.head() -- {df.head()}')        return list(df['continent'].unique())@callback(    Output('dropdown-country', 'options'),    [Input('store', 'data'),      Input('dropdown-continent', 'value')      ])def fn_dropdown_country(data, continent):    df = pd.DataFrame(data)    df_cont = df[df['continent'] == continent]    return list(df_cont['country'].unique())    @callback(    [Output('table-country', 'data'),     Output('table-country', 'columns')],    [Input('store', 'data'),     Input('slider', 'value'),     Input('dropdown-continent', 'value'),     Input('dropdown-country', 'value')]    )def fn_table_country(data, selected_year_value, continent, country):    df = pd.DataFrame(data)        print(f'year-value -- {selected_year_value}')        df_cont = df[df['continent'] == continent]    df_count = df_cont[df_cont['country'] == country]        df_count_period = df_count[(df_count['year'] <= selected_year_value)]    df_count_period = df_count_period.sort_values(by=['year'], ascending=True, ignore_index=True)    print(f'df_count_period.head() -- {df_count_period.head()}')        return df_count_period.to_dict('records'), [{"name": col, "id": col} for col in df_count_period.columns]@callback(    Output('graph-country', 'figure'),    Input('table-country', 'data')    )def fn_graph(data):    df_count = pd.DataFrame(data)            fig = px.bar(df_count,                   x='year',                   y=['pop'],                  color='lifeExp',                  hover_name='country',                  title='Bar chart, country')    return fig        